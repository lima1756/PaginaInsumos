{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Map/Map.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","open","setOpen","input","setInput","className","type","ref","value","searchValue","onChange","ev","setSearchValue","target","onClick","current","focus","alert","GoogleApiWrapper","apiKey","stores","i","searchResults","length","r","storeId","maskType","push","quantity","address","lat","long","style","width","height","google","zoom","initialCenter","location","latitude","lng","longitude","title","name","position","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","setSearchResults","useEffect","isGeolocationAvailable","isGeolocationEnabled","alignLinks","brand","href","id","menuIcon","options","draggable","edge","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","outDuration","preventScrolling","coords","data-field","map","row","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4SAoCeA,MAhCf,SAAmBC,GAAQ,IAAD,EAEAC,oBAAS,GAFT,mBAEjBC,EAFiB,KAEXC,EAFW,OAGEF,mBAAS,MAHX,mBAGjBG,EAHiB,KAGVC,EAHU,KAiBxB,OACE,yBAAKC,UAAU,aACX,yBAAKA,UAAWJ,EAAK,cAAe,UAChC,2BAAOK,KAAK,SAASD,UAAU,6BAC7BE,IAAK,SAACJ,GAAWC,EAASD,IAC1BK,MAAOT,EAAMU,YACbC,SAAU,SAAAC,GAAKZ,EAAMa,eAAeD,EAAGE,OAAOL,UAChD,0BAAMH,UAAU,gBAAgBS,QApBrB,WACnB,GAAuB,KAApBf,EAAMU,YAAiB,CACxB,IAAIM,GAAWd,EACfC,EAAQa,GACLA,GAAWZ,GACZA,EAAMa,aAIRC,MAAMlB,EAAMU,eAYF,0BAAMJ,UAAU,oB,cCoBjBa,iCAAiB,CACpBC,OAAS,IADND,EA3Cf,SAAsBnB,GAGlB,IADA,IAAMqB,EAAS,GACPC,EAAI,EAAGA,EAAItB,EAAMuB,cAAcC,OAAQF,IAAI,CAC/C,IAAMG,EAAIzB,EAAMuB,cAAcD,GAC1BD,EAAOI,EAAEC,UAWTL,EAAOI,EAAEC,SAASC,SAASC,KAAKH,EAAEE,UAClCN,EAAOI,EAAEC,SAASG,SAASD,KAAKH,EAAEI,WAXlCR,EAAOI,EAAEC,SAAW,CAChB,QAAYD,EAAEC,QACd,QAAYD,EAAEK,QACd,IAAML,EAAEM,IACR,KAAON,EAAEO,KACT,SAAa,CAACP,EAAEE,UAChB,SAAY,CAACF,EAAEI,WAW3B,OACI,yBAAKvB,UAAU,OACX,kBAAC,MAAD,CAAK2B,MAAQ,CACTC,MAAO,OACPC,OAAQ,QAERC,OAAQpC,EAAMoC,OAAQC,KAAM,GAC5BC,cAA+B,MAAhBtC,EAAMuC,SAAe,CAACR,IAAI/B,EAAMuC,SAASC,SAAUC,IAAIzC,EAAMuC,SAASG,WAAY,MAE7E,MAAhB1C,EAAMuC,SACF,kBAAC,SAAD,CAAQI,MAAO,gBACXC,KAAM,MACNC,SAAU,CAACd,IAAK/B,EAAMuC,SAASC,SAAUC,IAAKzC,EAAMuC,SAASG,aACnE,0C,cCyEPI,2BAAW,CACtBC,gBAAiB,CACbC,oBAAoB,GAExBC,oBAAqB,KAJVH,EAzGf,SAAa9C,GAAQ,IAAD,EACwBC,mBAAS,IADjC,mBACXsB,EADW,KACI2B,EADJ,OAEoBjD,mBAAS,IAF7B,mBAEXS,EAFW,KAEEG,EAFF,KAqClB,OAhCAsC,qBAAU,WACRD,EAAiB,CACf,CAAC,QAAW,EAAI,QAAY,cAAgB,IAAM,YAAa,KAAO,YAAa,SAAa,EAAG,SAAY,IAC/G,CAAC,QAAW,EAAI,QAAY,cAAgB,IAAM,WAAY,KAAO,YAAa,SAAa,EAAG,SAAY,IAC9G,CAAC,QAAW,EAAI,QAAY,cAAgB,IAAM,YAAa,KAAO,YAAa,SAAa,EAAG,SAAY,IAC/G,CAAC,QAAW,EAAI,QAAY,cAAgB,IAAM,WAAY,KAAO,WAAY,SAAa,EAAG,SAAY,OAE9G,KAEClD,EAAMoD,wBAA2BpD,EAAMqD,qBAwBzC,yBAAK/C,UAAU,OACb,kBAAC,SAAD,CACEA,UAAU,SACVgD,WAAW,QACXC,MAAO,uBAAGjD,UAAU,aAAakD,KAAK,KAA/B,QACPC,GAAG,aACHC,SAAU,kBAAC,OAAD,aACVC,QAAS,CACPC,WAAW,EACXC,KAAM,OACNC,WAAY,IACZC,WAAY,KACZC,aAAc,KACdC,UAAW,KACXC,YAAa,KACbC,YAAa,IACbC,kBAAkB,IAGpB,kBAAC,UAAD,CAASZ,KAAK,IAAd,mBAGA,kBAAC,UAAD,CAASA,KAAK,mBAAd,eAIF,yBAAKlD,UAAU,gBACb,kBAAC,EAAD,CAAWO,eAAgBA,EAAgBH,YAAaA,IACxD,kBAAC,EAAD,CAAK6B,SAAUvC,EAAMqE,OAAQ9C,cAAeA,KAE9C,yBAAKjB,UAAU,WACb,kBAAC,QAAD,KACE,+BACE,4BACE,wBAAIgE,aAAW,MAAf,YAGA,wBAAIA,aAAW,QAAf,aAGA,wBAAIA,aAAW,SAAf,SAKJ,+BACI/C,EAAcgD,KAAI,SAACC,GAAD,OAClB,4BACE,4BACGA,EAAI1C,SAEP,4BACG0C,EAAI7C,UAEP,4BACG6C,EAAI3C,qBC3FH4C,QACW,cAA7BC,OAAOnC,SAASoC,UAEe,UAA7BD,OAAOnC,SAASoC,UAEhBD,OAAOnC,SAASoC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d15a706b.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Searchbar.scss';\n\n\nfunction SearchBar(props) {\n\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState(null);\n  const searchButton = ()=>{\n    if(props.searchValue===\"\"){\n      let current = !open;\n      setOpen(current);\n      if(current && input){\n        input.focus();\n      }\n    } else {\n      // TODO: request a search\n      alert(props.searchValue);\n    }\n  }\n\n  return (\n    <div className=\"SearchBar\">\n        <div className={open?\"search open\": \"search\"}>\n            <input type=\"search\" className=\"browser-default search-box\"\n              ref={(input) => {setInput(input)}}\n              value={props.searchValue}\n              onChange={ev=>{props.setSearchValue(ev.target.value)}}/>\n            <span className=\"search-button\" onClick={searchButton}>\n                <span className=\"search-icon\"></span>\n            </span>\n        </div>\n    </div>\n  )\n}\n\nexport default SearchBar;\n","import React, {useState, useEffect} from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\n\nimport './Map.scss';\n\n\nfunction MapContainer(props) {\n    // TODO: request for key\n    const stores = {};\n    for(let i = 0; i < props.searchResults.length; i++){\n        const r = props.searchResults[i];\n        if(!stores[r.storeId]){\n            stores[r.storeId] = {\n                \"storeId\":  r.storeId,\n                \"address\" : r.address ,\n                \"lat\":r.lat,\n                \"long\":r.long,\n                \"maskType\" : [r.maskType],\n                \"quantity\": [r.quantity]\n            }\n        }\n        else {\n            stores[r.storeId].maskType.push(r.maskType);\n            stores[r.storeId].quantity.push(r.quantity);\n        }\n    }\n\n\n\n    return(\n        <div className=\"Map\">\n            <Map style= {{\n                width: '100%',\n                height: '80vh'\n                }}\n                google={props.google} zoom={14}\n                initialCenter={props.location!=null?{lat:props.location.latitude, lng:props.location.longitude}: null}>\n                {\n                    props.location!=null?(\n                        <Marker title={'Your location'}\n                            name={'YOU'}\n                            position={{lat: props.location.latitude, lng: props.location.longitude}} />\n                    ):<></>\n                }\n            </Map>\n        </div>\n    )\n}\n\nexport default GoogleApiWrapper({\n            apiKey: ('')\n        })(MapContainer);\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport 'materialize-css'\nimport { Navbar, NavItem, Icon, Table } from 'react-materialize';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport Map from './components/Map/Map';\nimport { geolocated } from \"react-geolocated\";\nimport '../node_modules/materialize-css/dist/css/materialize.min.css'\n\n\nfunction App(props) {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  //TODO: removed mocked data\n  useEffect(()=>{\n    setSearchResults([\n      {\"storeId\": 1 , \"address\" : \"direccion 1\" , \"lat\":\"-34.79498\", \"long\":\"145.62293\", \"maskType\" : 1, \"quantity\": 20 },\n      {\"storeId\": 2 , \"address\" : \"direccion 2\" , \"lat\":\"21.47796\", \"long\":\"-13.67654\", \"maskType\" : 2, \"quantity\": 10 },\n      {\"storeId\": 1 , \"address\" : \"direccion 1\" , \"lat\":\"-34.79498\", \"long\":\"145.62293\", \"maskType\" : 3, \"quantity\": 15 },\n      {\"storeId\": 3 , \"address\" : \"direccion 3\" , \"lat\":\"54.61783\", \"long\":\"82.25302\", \"maskType\" : 4, \"quantity\": 8 },\n    ])\n  }, []);\n\n  if(!props.isGeolocationAvailable || !props.isGeolocationEnabled){\n    // TODO: request location\n  }\n\n\n  const onPlaceClick = (props, marker, e) => {\n    // setState({\n    //   selectedPlace: props,\n    //   activeMarker: marker,\n    //   showingInfoWindow: true\n    // });\n  }\n\n  const onMapClicked = (props) => {\n    // if state.showingInfoWindow\n    if (false) {\n      // setState({\n      //   showingInfoWindow: false,\n      //   activeMarker: null\n      // })\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        className=\"navbar\"\n        alignLinks=\"right\"\n        brand={<a className=\"brand-logo\" href=\"#\">Logo</a>}\n        id=\"mobile-nav\"\n        menuIcon={<Icon>menu</Icon>}\n        options={{\n          draggable: true,\n          edge: 'left',\n          inDuration: 250,\n          onCloseEnd: null,\n          onCloseStart: null,\n          onOpenEnd: null,\n          onOpenStart: null,\n          outDuration: 200,\n          preventScrolling: true\n        }}\n      >\n        <NavItem href=\"\">\n          Getting started\n        </NavItem>\n        <NavItem href=\"components.html\">\n          Components\n        </NavItem>\n      </Navbar>\n      <div className=\"MapContainer\">\n        <Searchbar setSearchValue={setSearchValue} searchValue={searchValue}/>\n        <Map location={props.coords} searchResults={searchResults}/>\n      </div>\n      <div className=\"results\">\n        <Table>\n          <thead>\n            <tr>\n              <th data-field=\"id\">\n                Location\n              </th>\n              <th data-field=\"name\">\n                Mask Type\n              </th>\n              <th data-field=\"price\">\n                Qty\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            { searchResults.map((row)=>(\n              <tr>\n                <td>\n                  {row.address}\n                </td>\n                <td>\n                  {row.maskType}\n                </td>\n                <td>\n                  {row.quantity}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n\n      </div>\n    </div>\n  );\n}\n\nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}