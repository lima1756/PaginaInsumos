{"version":3,"sources":["components/Searchbar/Searchbar.js","components/Map/Map.js","components/ModalForm.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","open","setOpen","input","setInput","className","type","ref","value","searchValue","onChange","ev","setSearchValue","target","onClick","current","focus","alert","key","axios","get","then","res","data","catch","ex","console","log","GoogleApiWrapper","apiKey","style","width","height","containerStyle","position","google","zoom","initialCenter","location","lat","latitude","lng","longitude","onMapClicked","children","ModalForm","address","setAdress","name","setName","inventory","setInventory","inventorySize","setInventorySize","updateInventory","col","id","copy","JSON","parse","stringify","actions","flat","modal","node","waves","setVisible","bottomSheet","fixedFooter","header","visible","options","dismissible","endingTop","inDuration","onCloseEnd","onCloseStart","onOpenEnd","onOpenStart","opacity","outDuration","preventScrolling","startingTop","label","temp","temp2","i","push","price","map","item","pos","maskType","quantity","storeId","post","response","error","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","searchResults","setSearchResults","selectedPlace","setSelectedPlace","setActiveMarker","showingInfoWindow","setShowingInfoWindow","addStoreModal","setAddStoreModal","useEffect","area","params","requestData","userMarker","onPlaceClick","_p","_marker","e","place","stores","marker","coords","title","length","r","long","alignLinks","brand","href","src","menuIcon","draggable","edge","Object","keys","k","data-field","row","_id","reduce","acc","curr","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.473db959.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './Searchbar.scss';\n\n\nfunction SearchBar(props) {\n\n  const [open, setOpen] = useState(false);\n  const [input, setInput] = useState(null);\n  const searchButton = ()=>{\n    if(props.searchValue===\"\"){\n      let current = !open;\n      setOpen(current);\n      if(current && input){\n        input.focus();\n      }\n    } else {\n      // TODO: request a search\n      alert(props.searchValue);\n    }\n  }\n\n  return (\n    <div className=\"SearchBar\">\n        <div className={open?\"search open\": \"search\"}>\n            <input type=\"search\" className=\"browser-default search-box\"\n              ref={(input) => {setInput(input)}}\n              value={props.searchValue}\n              onChange={ev=>{props.setSearchValue(ev.target.value)}}/>\n            <span className=\"search-button\" onClick={searchButton}>\n                <span className=\"search-icon\"></span>\n            </span>\n        </div>\n    </div>\n  )\n}\n\nexport default SearchBar;\n","import React, {useState} from 'react';\nimport {Map, GoogleApiWrapper} from 'google-maps-react';\nimport axios from 'axios';\n\nimport './Map.scss';\n\nlet key = \"\";\naxios.get(`/mapspoint`)\n.then(res => {\n    key = res.data.key;\n}).catch(ex => {\n    console.log(ex);\n})\n\nfunction MapContainer(props) {\n    return(\n        <div className=\"Map\">\n            <Map style= {{\n                    width: '100%',\n                    height: '80vh'\n                    }}\n                containerStyle = {{\n                    position: 'relative',\n                    width: '100%',\n                    height: '80vh'\n                    }\n                }\n                google={props.google}\n                zoom={14}\n                initialCenter={props.location!=null?{lat:props.location.latitude, lng:props.location.longitude}: {lat:0, lng:0}}\n                onClick={props.onMapClicked}\n            >\n                {props.children}\n            </Map>\n        </div>\n    )\n}\n\nexport default GoogleApiWrapper({\n            apiKey: (key)\n        })(MapContainer);\n","import React, {useState} from 'react';\nimport { Row, Modal, Button, TextInput } from 'react-materialize';\nimport axios from 'axios';\n\nfunction ModalForm(props) {\n\n    const [address, setAdress] = useState(\"\")\n    const [name, setName] = useState(\"\")\n    const [inventory, setInventory] = useState({\"maskType\": [],\"quantity\": [],\"price\":[]})\n    const [inventorySize, setInventorySize] = useState(0);\n\n    const inventorySizeChange = (ev)=>{\n        setInventorySize(ev.target.value);\n        let temp = []\n        let temp2 = []\n        for(let i = 0; i < ev.target.value; i++){\n        temp.push(\"\");\n        temp2.push(0);\n        }\n        setInventory({\"maskType\": temp,\"quantity\": temp2,\"price\":temp2})\n    }\n\n    const updateInventory = (col, id)=>{\n        return (ev) => {\n            let copy = JSON.parse(JSON.stringify(inventory));\n            copy[col][id] = ev.target.value;\n            setInventory(copy);\n        }\n    }\n\n    const submit = ()=>{\n        if(inventorySize<=0){\n            alert(\"please add inventory\");\n            return;\n        }\n        const data = {\n            address: address,\n            storeId: name,\n            inventory\n        }\n        axios.post('/addstore', data)\n        .then((response) => {\n            console.log(response);\n        }, (error) => {\n            console.log(error);\n        });\n    }\n\n    return <Modal\n        actions={[\n          <Button flat modal=\"close\" node=\"button\" waves=\"green\" onClick={()=>{props.setVisible(false)}}>Close</Button>\n        ]}\n        bottomSheet={false}\n        fixedFooter={false}\n        header=\"Add you store\"\n        id=\"Modal-0\"\n        open={props.visible}\n        options={{\n          dismissible: true,\n          endingTop: '10%',\n          inDuration: 250,\n          onCloseEnd: null,\n          onCloseStart: null,\n          onOpenEnd: null,\n          onOpenStart: null,\n          opacity: 0.5,\n          outDuration: 250,\n          preventScrolling: true,\n          startingTop: '4%'\n        }}\n      >\n      <div>\n        <TextInput\n            label=\"Store name\"\n            value={name}\n            onChange={(ev)=>{setName(ev.target.value)}}\n            />\n        <TextInput\n          label=\"Address\"\n          value={address}\n          onChange={(ev)=>{setAdress(ev.target.value)}}\n        />\n\n        <TextInput\n          type=\"number\"\n          label=\"Number of items you want to add\"\n          value={inventorySize}\n          onChange={inventorySizeChange}\n        />\n        </div>\n        {inventory.price.map((item, pos)=>{\n            return <Row key={pos}>\n\n                <TextInput\n                    label=\"Mask Type\"\n                    value={inventory.maskType[pos]}\n                    onChange={updateInventory(\"maskType\", pos)}\n                    />\n                <TextInput\n                    label=\"Quantity\"\n                    type=\"number\"\n                    value={inventory.quantity[pos]}\n                    onChange={updateInventory(\"quantity\", pos)}\n                    />\n                <TextInput\n                    label=\"Price\"\n                    type=\"number\"\n                    value={inventory.price[pos]}\n                    onChange={updateInventory(\"price\", pos)}\n                    />\n            </Row>\n        })}\n        <Button node=\"submit\" waves=\"light\" onClick={submit}>Submit</Button>\n      </Modal>\n}\n\nexport default ModalForm;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport 'materialize-css'\nimport { Navbar, NavItem, Icon, Table, Button, TextInput } from 'react-materialize';\nimport Searchbar from './components/Searchbar/Searchbar';\nimport Map from './components/Map/Map';\nimport { geolocated } from \"react-geolocated\";\nimport { Marker, InfoWindow } from 'google-maps-react';\nimport ModalForm from './components/ModalForm';\nimport axios from 'axios';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css'\n\n\n\nfunction App(props) {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [selectedPlace, setSelectedPlace] = useState({});\n  const [activeMarker, setActiveMarker] = useState({});\n  const [showingInfoWindow, setShowingInfoWindow] = useState(true);\n  const [addStoreModal, setAddStoreModal] = useState(false);\n\n  const requestData = (area) => {\n    let params = {}\n    if (area!=null)\n      params = {\n        area: area\n      }\n    axios.get(`/stores`, params)\n    .then(res => {\n      console.log(res.data)\n      setSearchResults(res.data)\n    }).catch(ex => {\n        console.log(ex);\n        setSearchResults([\n          {\"_id\":1, \"storeId\": 1 , \"address\" : \"direccion 1\" , \"lat\":\"20.685950\", \"long\":\"-103.377770\", \"inventory\" : {\"maskType\": [1],\"quantity\": [20],\"price\":[5]} },\n          {\"_id\":2, \"storeId\": 2 , \"address\" : \"direccion 2\" , \"lat\":\"20.660874\", \"long\":\"-103.350021\", \"inventory\" : {\"maskType\": [1,5],\"quantity\": [1,2],\"price\":[1,2]} },\n          {\"_id\":4, \"storeId\": 3 , \"address\" : \"direccion 3\" , \"lat\":\"20.679046\", \"long\":\"-103.371433\", \"inventory\" : {\"maskType\": [20],\"quantity\": [100],\"price\":[200]} },\n        ])\n    })\n  }\n  useEffect(()=>{\n    requestData();\n    setActiveMarker(userMarker);\n    setShowingInfoWindow(true);\n  }, []);\n\n  const onPlaceClick = (storeId) => {\n    if(storeId === -1){\n      return (_p, _marker, e) => {\n        setSelectedPlace({address:\"Your position\"});\n        setActiveMarker(userMarker);\n        setShowingInfoWindow(true);\n      }\n    }\n    return (_p, _marker, e) => {\n      const place = stores[storeId+\"\"];\n      console.log(place);\n      setSelectedPlace(place);\n      setActiveMarker(place.marker);\n      setShowingInfoWindow(true);\n    }\n  }\n\n  let userMarker = {};\n  if(props.coords){\n    userMarker = <Marker title={'Your location'}\n            name={'YOU'}\n            position={{lat: props.coords.latitude, lng: props.coords.longitude}} onClick={onPlaceClick(-1)}/>;\n\n  }\n  else {\n    userMarker = <Marker title={'Your location'}\n            name={'YOU'}\n            position={{lat: 0, lng: 0}} onClick={onPlaceClick(-1)}/>;\n  }\n\n  const onMapClicked = (props) => {\n    if (showingInfoWindow) {\n      setShowingInfoWindow(false);\n    }\n  };\n\n  const stores = {};\n  for(let i = 0; i < searchResults.length; i++){\n      const r = searchResults[i];\n      if(!stores[r.storeId]){\n          stores[r.storeId] = {\n              \"storeId\":  r.storeId,\n              \"address\" : r.address ,\n              \"lat\":r.lat,\n              \"long\":r.long,\n              \"maskType\" : [r.maskType],\n              \"quantity\": [r.quantity],\n              \"marker\": (<Marker key={r.storeId} name={r.address} onClick={onPlaceClick(r.storeId)} position={{lat: r.lat, lng: r.long}}/>)\n          }\n      }\n      else {\n          stores[r.storeId].maskType.push(r.maskType);\n          stores[r.storeId].quantity.push(r.quantity);\n      }\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar\n        className=\"navbar\"\n        alignLinks=\"right\"\n        brand={<a className=\"brand-logo\" href=\"#\"><img src=\"/static/imgs/logo.png\" style={{height:\"6vh\"}}/></a>}\n        id=\"mobile-nav\"\n        menuIcon={<Icon>menu</Icon>}\n        options={{\n          draggable: true,\n          edge: 'left',\n          inDuration: 250,\n          onCloseEnd: null,\n          onCloseStart: null,\n          onOpenEnd: null,\n          onOpenStart: null,\n          outDuration: 200,\n          preventScrolling: true\n        }}\n      >\n        <NavItem href=\"#\" onClick={()=>{setAddStoreModal(true)}}>\n          Add store\n        </NavItem>\n      </Navbar>\n      <div className=\"MapContainer\">\n        <Searchbar setSearchValue={setSearchValue} searchValue={searchValue}/>\n        <Map location={props.coords} searchResults={searchResults} stores={stores} onMapClicked={onMapClicked}>\n          {Object.keys(stores).map((k)=>stores[k].marker)}\n          {userMarker}\n          <InfoWindow position={{lat: selectedPlace.lat, lng: selectedPlace.long}} visible={showingInfoWindow}><div>{selectedPlace.address}</div> </InfoWindow>\n        </Map>\n      </div>\n      <div className=\"results\">\n        <Table>\n          <thead>\n            <tr>\n              <th data-field=\"id\">\n                Location\n              </th>\n              <th data-field=\"name\">\n                Mask Type\n              </th>\n              <th data-field=\"price\">\n                Qty\n              </th>\n              <th data-field=\"price\">\n                Price\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            { searchResults.map((row)=>(\n              <tr key={row._id} onClick={onPlaceClick(row.storeId)} className=\"clickable\">\n                <td>\n                  {row.address}\n                </td>\n                <td>\n                  {row.inventory.maskType.reduce((acc, curr)=> acc+\", \"+curr)}\n                </td>\n                <td>\n                  {row.inventory.quantity.reduce((acc, curr)=> acc+\", \"+curr)}\n                </td>\n                <td>\n                  {row.inventory.price.reduce((acc, curr)=> acc+\", \"+curr)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n\n      </div>\n      <ModalForm visible={addStoreModal} setVisible={setAddStoreModal}/>\n    </div>\n  );\n}\n\nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}